package integerarraylist;

import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;

import org.junit.jupiter.api.Test;

class CustomIntegerArrayListTest {

	@Test
	void testGetArrayList() {
		
		//create a new empty CustomIntegerArrayList
		CustomIntegerArrayList arr1 = new CustomIntegerArrayList();
		arr1.add(2);
		arr1.add(0, 5);
		arr1.add(1, 5);
		
		ArrayList<Integer> lst1 = new ArrayList<Integer>();
		lst1.add(2);
		lst1.add(0, 5);
		lst1.add(1, 5);
		assertEquals(lst1, arr1.getArrayList());

		ArrayList<Integer> arr4Elements = new ArrayList<Integer>();
		arr4Elements.add(100);
		arr4Elements.add(200);
		arr4Elements.add(500);
		
		//create a new CustomIntegerArrayList with the elements in the given ArrayList
		CustomIntegerArrayList arr4 = new CustomIntegerArrayList(arr4Elements);

		ArrayList<Integer> lst4 = new ArrayList<Integer>();
		lst4.add(100);
		lst4.add(200);
		lst4.add(500);

		assertEquals(lst4, arr4.getArrayList());
		
		// TODO write at least 3 additional test cases 
		CustomIntegerArrayList arr2 = new CustomIntegerArrayList();
		arr2.add(3);
		arr2.add(0, 2);
		arr2.add(1, 1);
		
		ArrayList<Integer> lst2 = new ArrayList<Integer>();
		lst2.add(3);
		lst2.add(0, 2);
		lst2.add(1, 1);
		assertEquals(lst2, arr2.getArrayList());
		
		ArrayList<Integer> arr44Elements = new ArrayList<Integer>();
		arr44Elements.add(10);
		arr44Elements.add(300);
		arr44Elements.add(400);
		
		//create a new CustomIntegerArrayList with the elements in the given ArrayList
		CustomIntegerArrayList arr44 = new CustomIntegerArrayList(arr44Elements);

		ArrayList<Integer> lst44 = new ArrayList<Integer>();
		lst44.add(10);
		lst44.add(300);
		lst44.add(400);

		assertEquals(lst44, arr44.getArrayList());

		CustomIntegerArrayList arr11 = new CustomIntegerArrayList();
		arr11.add(11);
		arr11.add(0, 12);
		arr11.add(1, 13);
		
		ArrayList<Integer> lst22 = new ArrayList<Integer>();
		lst22.add(11);
		lst22.add(0, 12);
		lst22.add(1, 13);
		assertEquals(lst22, arr11.getArrayList());
		
	}

	@Test
	void testGet() {
		CustomIntegerArrayList arr1 = new CustomIntegerArrayList();
		arr1.add(2);
		arr1.add(0, 5);
		arr1.add(1, 5);
		
		ArrayList<Integer> lst1 = new ArrayList<Integer>();
		lst1.add(2);
		lst1.add(0, 5);
		lst1.add(1, 5);

		assertEquals(lst1.get(0), arr1.get(0));
		assertEquals(lst1.get(1), arr1.get(1));
		assertEquals(lst1.get(2), arr1.get(2));

		// TODO write at least 3 additional test cases 
		CustomIntegerArrayList arr12 = new CustomIntegerArrayList();
		arr12.add(32);
		arr12.add(0, 5);
		arr12.add(1, 7);
		
		ArrayList<Integer> lst12 = new ArrayList<Integer>();
		lst12.add(32);
		lst12.add(0, 5);
		lst12.add(1, 7);
		
		assertEquals(lst12.get(0), arr12.get(0));
		assertEquals(lst12.get(1), arr12.get(1));
		assertEquals(lst12.get(2), arr12.get(2));
		
	}

	@Test
	void testAddInt() {
		
		CustomIntegerArrayList arr1 = new CustomIntegerArrayList();
		arr1.add(2);
		arr1.add(3);
		arr1.add(4);
		
		ArrayList<Integer> lst1 = new ArrayList<Integer>();
		lst1.add(2);
		lst1.add(3);
		lst1.add(4);

		assertEquals(lst1.get(0), arr1.get(0));
		assertEquals(lst1.get(1), arr1.get(1));
		assertEquals(lst1.get(2), arr1.get(2));

		// TODO write at least 3 additional test cases 
		CustomIntegerArrayList arr11 = new CustomIntegerArrayList();
		arr11.add(22);
		arr11.add(23);
		arr11.add(24);
		
		ArrayList<Integer> lst11 = new ArrayList<Integer>();
		lst11.add(22);
		lst11.add(23);
		lst11.add(24);

		assertEquals(lst11.get(0), arr11.get(0));
		assertEquals(lst11.get(1), arr11.get(1));
		assertEquals(lst11.get(2), arr11.get(2));
		
	}

	@Test
	void testAddIntInt() {
		
		CustomIntegerArrayList arr1 = new CustomIntegerArrayList();
		arr1.add(0, 2);
		arr1.add(0, 3);
		arr1.add(0, 4);
		
		ArrayList<Integer> lst1 = new ArrayList<Integer>();
		lst1.add(0, 2);
		lst1.add(0, 3);
		lst1.add(0, 4);

		assertEquals(lst1.get(0), arr1.get(0));
		assertEquals(lst1.get(1), arr1.get(1));
		assertEquals(lst1.get(2), arr1.get(2));

		// TODO write at least 3 additional test cases 	
		CustomIntegerArrayList arr12 = new CustomIntegerArrayList();
		arr12.add(0, 52);
		arr12.add(0, 53);
		arr12.add(0, 54);
		
		ArrayList<Integer> lst12 = new ArrayList<Integer>();
		lst12.add(0, 52);
		lst12.add(0, 53);
		lst12.add(0, 54);

		assertEquals(lst12.get(0), arr12.get(0));
		assertEquals(lst12.get(1), arr12.get(1));
		assertEquals(lst12.get(2), arr12.get(2));
		
	}

	@Test
	void testRemoveInt() {

		CustomIntegerArrayList arr1 = new CustomIntegerArrayList();
		arr1.add(0, 2);
		arr1.add(0, 3);
		arr1.add(0, 4);
		arr1.remove(0);
		arr1.remove(1);
		
		ArrayList<Integer> lst1 = new ArrayList<Integer>();
		lst1.add(0, 2);
		lst1.add(0, 3);
		lst1.add(0, 4);
		lst1.remove(0);
		lst1.remove(1);
		
		assertEquals(lst1.get(0), arr1.get(0));

		// TODO write at least 3 additional test cases 
		CustomIntegerArrayList arr11 = new CustomIntegerArrayList();
		arr11.add(0, 42);
		arr11.add(0, 43);
		arr11.remove(0);
		
		ArrayList<Integer> lst11 = new ArrayList<Integer>();
		lst11.add(0, 42);
		lst11.add(0, 43);
		lst11.remove(0);
		assertEquals(lst11.get(0), arr11.get(0));
		
		CustomIntegerArrayList arr12 = new CustomIntegerArrayList();
		arr12.add(0, 82);
		arr12.add(0, 83);
		arr12.add(0, 84);
		arr12.remove(0);
		arr12.remove(1);
		
		ArrayList<Integer> lst12 = new ArrayList<Integer>();
		lst12.add(0, 82);
		lst12.add(0, 83);
		lst12.add(0, 84);
		lst12.remove(0);
		lst12.remove(1);
		assertEquals(lst12.get(0), arr12.get(0));
		assertEquals(lst12.get(1), arr12.get(2));
		
	}

	@Test
	void testRemoveIntInt() {

		CustomIntegerArrayList arr1 = new CustomIntegerArrayList();
		arr1.add(0, 2);
		arr1.add(0, 3);
		arr1.add(0, 3);
		arr1.add(0, 3);
		arr1.add(0, 3);
		arr1.add(0, 4);
		arr1.remove(3, 3);
		
		ArrayList<Integer> lst1 = new ArrayList<Integer>();
		lst1.add(0, 2);
		lst1.add(0, 3);
		lst1.add(0, 4);

		assertEquals(lst1, arr1.getArrayList());

		// TODO write at least 3 additional test cases 
		CustomIntegerArrayList arr11 = new CustomIntegerArrayList();
		arr11.add(0, 12);
		arr11.add(0, 13);
		arr11.add(0, 13);
		arr11.add(0, 13);
		arr11.add(0, 13);
		arr11.add(0, 4);
		arr11.remove(3, 13);
		
		ArrayList<Integer> lst11 = new ArrayList<Integer>();
		lst11.add(0, 12);
		lst11.add(0, 13);
		lst11.add(0, 14);

		assertEquals(lst11, arr11.getArrayList());
		
		CustomIntegerArrayList arr12 = new CustomIntegerArrayList();
		arr12.add(0, 42);
		arr12.add(0, 43);
		arr12.add(0, 43);
		arr12.add(0, 43);
		arr12.add(0, 44);
		arr12.remove(2, 43);
		
		ArrayList<Integer> lst12 = new ArrayList<Integer>();
		lst11.add(0, 42);
		lst11.add(0, 43);
		lst11.add(0, 44);

		assertEquals(lst12, arr12.getArrayList());
		
		
		CustomIntegerArrayList arr13 = new CustomIntegerArrayList();
		arr13.add(0, 14);
		arr13.add(0, 24);
		arr13.add(0, 24);
		arr13.add(0, 24);
		arr13.add(0, 44);
		arr13.remove(2, 24);
		
		ArrayList<Integer> lst13 = new ArrayList<Integer>();
		lst13.add(0, 14);
		lst13.add(0, 24);
		lst13.add(0, 44);

		assertEquals(lst13, arr13.getArrayList());
	}

	@Test
	void testSpliceIntInt() {

		CustomIntegerArrayList arr1 = new CustomIntegerArrayList();
		arr1.add(2);
		arr1.add(3);
		arr1.add(4);
		arr1.add(5);
		arr1.add(6);
		arr1.splice(3, 2);
		
		ArrayList<Integer> lst1 = new ArrayList<Integer>();
		lst1.add(2);
		lst1.add(3);
		lst1.add(4);

		assertEquals(lst1.get(0), arr1.get(0));
		assertEquals(lst1.get(1), arr1.get(1));
		assertEquals(lst1.get(2), arr1.get(2));

		// TODO write at least 3 additional test cases 
		assertEquals(lst1.get(0), arr1.get(0));
		assertEquals(lst1.get(0), arr1.get(0));
		assertEquals(lst1.get(0), arr1.get(0));
	}

	@Test
	void testSpliceIntIntIntArray() {
		
		CustomIntegerArrayList arr1 = new CustomIntegerArrayList();
		arr1.add(2);
		arr1.add(3);
		arr1.add(4);
		arr1.add(5);
		arr1.add(6);
		arr1.splice(3, 1, new int[] { 4, 5 });
		
		ArrayList<Integer> lst1 = new ArrayList<Integer>();
		lst1.add(2);
		lst1.add(3);
		lst1.add(4);
		lst1.add(4);
		lst1.add(5);
		lst1.add(6);
		
		assertEquals(lst1, arr1.getArrayList());

		// TODO write at least 3 additional test cases 
	}

}
